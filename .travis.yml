sudo: required

language: php

notifications:
  email: false

php:
  - '7.1'

matrix:
  fast_finish: true
  allow_failures:
    - php: nightly
    - env: WP_VERSION=nightly

services:
  - mysql

cache:
  apt: true
  directories:
    - vendor
    - $HOME/.composer/cache/files

addons:
  apt:
    sources:
      - sourceline: 'ppa:ondrej/php'
    packages:
      - imagemagick
      - libjpeg-dev
      - libpng12-dev
      - php7.1-fpm
      - php7.1-mysql
      - nginx
  hosts:
    - wp.localhost

env:
  global:
    - WP_ROOT_FOLDER="/tmp/wordpress"
    - WP_URL="http://wp.localhost"
    - WP_DOMAIN="wp.localhost"
    - DB_NAME="wp"
    - TEST_DB_NAME="tests"
    - WP_TABLE_PREFIX="wp_"
    - WP_ADMIN_USERNAME="admin"
    - WP_ADMIN_PASSWORD="admin"
  matrix:
    - WP_VERSION=latest
    - WP_VERSION=nightly

before_install:
  # create the databases that will be used in the tests
  - mysql -e "create database IF NOT EXISTS $DB_NAME;" -uroot
  - mysql -e "create database IF NOT EXISTS $TEST_DB_NAME;" -uroot
  # set up folders
  - mkdir -p $WP_ROOT_FOLDER
  - mkdir tools
  # install wp-cli in the `tools` folder
  - wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -P $(pwd)/tools/
  - chmod +x tools/wp-cli.phar && mv tools/wp-cli.phar tools/wp
  # append the `tools` folder to the PATH
  - export PATH=$PATH:$(pwd)/tools
  # prepend the `vendor/bin` folder the PATH
  - export PATH=vendor/bin:$PATH
  # disable XDebug to speed up the tests
  - phpenv config-rm xdebug.ini
  # install imagick PHP extension
  - pear config-set preferred_state beta
  - pecl channel-update pecl.php.net
  - yes | pecl install imagick

install:
  - composer install
  # install WordPress
  - cd $WP_ROOT_FOLDER
  - wp core download --version=$WP_VERSION
  - wp config create --dbname="$DB_NAME" --dbuser="root" --dbpass="" --dbhost="127.0.0.1" --dbprefix="$WP_TABLE_PREFIX"
  - wp core install --url="$WP_URL" --title="Test" --admin_user="$WP_ADMIN_USERNAME" --admin_password="$WP_ADMIN_PASSWORD" --admin_email="admin@$WP_DOMAIN" --skip-email
  - wp rewrite structure '/%postname%/' --hard
  # update WordPress database to avoid prompts
  - wp core update-db
  # link the plugin code in the WordPress installation
  - ln -s $TRAVIS_BUILD_DIR $WP_ROOT_FOLDER/wp-content/plugins/gattiny
  - ls -la $WP_ROOT_FOLDER/wp-content/plugins
  # activate the plugin on the site
  - wp plugin deactivate $(wp plugin list --status=active --field=name)
  - wp plugin activate gattiny
  # export a dump of the just installed database to the _data folder
  - wp db export $TRAVIS_BUILD_DIR/tests/_data/dump.sql
  # get back to the build folder
  - cd $TRAVIS_BUILD_DIR
  # copy the Nginx configuration file to the available sites
  - sudo cp tests/travis/nginx.conf /etc/nginx/sites-available/$WP_DOMAIN
  - sudo sed -e "s?%WP_ROOT_FOLDER%?$WP_ROOT_FOLDER?g" --in-place /etc/nginx/sites-available/$WP_DOMAIN
  - sudo sed -e "s?%WP_DOMAIN%?$WP_DOMAIN?g" --in-place /etc/nginx/sites-available/$WP_DOMAIN
  - cat /etc/nginx/sites-available/$WP_DOMAIN
  # enable the site
  - sudo ln -s /etc/nginx/sites-available/$WP_DOMAIN /etc/nginx/sites-enabled/

before_script:
  # restart Nnginx and PHP-FPM services
  - sudo service php7.1-fpm restart
  - sudo service nginx restart
  # sanity check
  - curl $WP_URL

  # build Codeception modules
  - codecept build

script:
  - codecept run integration
  - codecept run functional -vvv
  - codecept run acceptance -vvv
